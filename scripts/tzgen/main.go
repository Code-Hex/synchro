package main

import (
	"archive/tar"
	"bufio"
	"bytes"
	"compress/gzip"
	"context"
	"fmt"
	"go/format"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"
)

const tzdataURL = "https://data.iana.org/time-zones/releases/tzdata2023c.tar.gz"

func main() {
	if err := run(context.Background()); err != nil {
		log.Fatal(err)
	}
}

func run(ctx context.Context) error {
	// download tzdata
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, tzdataURL, nil)
	if err != nil {
		return err
	}
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return fmt.Errorf("failed to download tzdata: %w", err)
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("failed to download tzdata: %s", resp.Status)
	}

	// extract zone.tab
	gr, err := gzip.NewReader(resp.Body)
	if err != nil {
		return err
	}
	defer gr.Close()
	tr := tar.NewReader(gr)
	for {
		h, err := tr.Next()
		if err != nil {
			return err
		}
		if h.Name == "zone.tab" {
			break
		}
	}

	// read zone.tab
	tzs, err := listTimeZone(tr)
	if err != nil {
		return err
	}
	for _, tz := range tzs {
		if err := gen(tz); err != nil {
			return fmt.Errorf("%q: %w", tz, err)
		}
	}

	// skip other files
	for {
		_, err := tr.Next()
		if err == io.EOF {
			break
		}
		if err != nil {
			return err
		}
	}
	return nil
}

func listTimeZone(r io.Reader) (tz []string, err error) {
	scanner := bufio.NewScanner(r)
	for scanner.Scan() {
		line := scanner.Text()
		if strings.HasPrefix(line, "#") {
			continue // コメント行をスキップ
		}
		fields := strings.Split(line, "\t")
		if len(fields) >= 3 {
			tz = append(tz, fields[2])
		}
	}

	if err := scanner.Err(); err != nil {
		return nil, fmt.Errorf("scan: %w", err)
	}
	return
}

var filenameReplacer = strings.NewReplacer(
	"/", "_",
	"-", "_",
)

var typenameReplacer = strings.NewReplacer(
	"/", "",
	"-", "",
)

func gen(timezone string) error {
	filename := filenameReplacer.Replace(strings.ToLower(timezone)) + ".go"

	f, err := os.Create(filepath.Join("tz", filename))
	if err != nil {
		return err
	}
	defer f.Close()

	var buf bytes.Buffer
	buf.WriteString("// Code generated by tzgen. DO NOT EDIT.\n")
	buf.WriteString("\n")
	buf.WriteString("package tz\n\n")
	buf.WriteString("import \"time\"\n")
	buf.WriteString("import \"sync\"\n\n")

	typename := typenameReplacer.Replace(timezone)
	fmt.Fprintf(&buf, "var (\n")
	fmt.Fprintf(&buf, "once%sLocation sync.Once\n", typename)
	fmt.Fprintf(&buf, "cache%sLocation *time.Location\n", typename)
	fmt.Fprintf(&buf, ")\n\n")

	fmt.Fprintf(&buf, "type %s struct {}\n\n", typename)
	fmt.Fprintf(&buf, "func (%s) Location() *time.Location {\n", typename)
	fmt.Fprintf(&buf, "once%sLocation.Do(func() {\n", typename)
	fmt.Fprintf(&buf, "    loc, err := time.LoadLocation(\"%s\")\n", timezone)
	fmt.Fprintf(&buf, "    if err != nil {\n")
	fmt.Fprintf(&buf, "        panic(err)\n")
	fmt.Fprintf(&buf, "    }\n")
	fmt.Fprintf(&buf, "    cache%sLocation = loc\n", typename)
	fmt.Fprintf(&buf, "})\n")
	fmt.Fprintf(&buf, "return cache%sLocation\n", typename)
	buf.WriteString("}\n")

	src, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}
	if _, err := f.Write(src); err != nil {
		return err
	}
	return nil
}
